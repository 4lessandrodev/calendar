import { IIterator, ITeratorConfig } from "../types";
/**
 * @description Iterator allows sequential traversal through a complex data structure without exposing its internal details.
 * Make any array an iterator using this class.
 */
export declare class Iterator<T> implements IIterator<T> {
    private currentIndex;
    private readonly items;
    private lastCommand;
    private readonly returnCurrentOnReversion;
    private readonly restartOnFinish;
    private constructor();
    /**
     * initialData?: Array<T>;
    returnCurrentOnReversion?: boolean;
    restartOnFinish?: boolean;
     */
    /**
     *
     * @param config Iterator setup as object.
     * @param config.initialData the initial state as Array<T> to turn iterable.
     * @param config.returnCurrentOnReversion this setting allows you to return the current element when you are iterating in one direction and decide to change the iteration to the other direction.
     * @param config.restartOnFinish this configuration turns the iteration into an infinite loop, as when reaching the last element, the iteration starts over from the first element.
     * @returns instance of Iterator.
     */
    static create<U>(config?: ITeratorConfig<U>): Iterator<U>;
    /**
     * @description Remove one item if found
     * @param item to be removed
     */
    removeItem(item: T): void;
    /**
     * @description This method check if has some elements after current position.
     * @returns boolean `true` if has next element and `false` if not.
     */
    hasNext(): boolean;
    /**
     * @description This method check if has some elements before current position.
     * @returns boolean `true` if has next element and `false` if not.
     */
    hasPrev(): boolean;
    /**
     * @description This method check if current data state is empty.
     * @returns boolean `true` if is empty and `false` if not.
     */
    isEmpty(): boolean;
    /**
     * @description This method get the element on current position. Alway start on first element.
     * @returns element on current position and update cursor to the next element.
     *
     * @access if param `config.restartOnFinish` is set to `true` and cursor is on last element the next one will be the first element on state, case value is set to `false` the next element will be `null`.
     */
    next(): T;
    /**
     * @description This method get the element on current position. Alway start on first element.
     * @returns element on current position and update cursor to the previous element.
     *
     * @access if param `config.restartOnFinish` is set to `true` and cursor is on first element the previous one will be the last element on state, case value is set to `false` the previous element will be `null`.
     */
    prev(): T;
    /**
     * @description Get element.
     * @returns the first element on state.
     */
    first(): T;
    /**
     * @description Get element.
     * @returns the last element on state.
     */
    last(): T;
    /**
     * @description Update cursor to the first element on state.
     * @returns instance of iterator.
     */
    toFirst(): Iterator<T>;
    /**
     * @description Update cursor to the last element on state.
     * @returns instance of iterator.
     */
    toLast(): Iterator<T>;
    /**
     * @description Delete state. Remove all elements on state
     * @returns instance of iterator.
     */
    clear(): Iterator<T>;
    /**
     * @description Add new element to state after last position.
     * @param data as element.
     * @returns instance of iterator.
     */
    addToEnd(data: T): Iterator<T>;
    /**
     * @description Add new element to state after last position.
     * @param data as element.
     * @returns instance of iterator.
     */
    add(data: T): Iterator<T>;
    /**
     * @description Add new element to state before first position.
     * @param data as element.
     * @returns instance of iterator.
     */
    addToStart(data: T): Iterator<T>;
    /**
     * @description Remove the last element from state.
     * @returns instance of iterator.
     */
    removeLast(): Iterator<T>;
    /**
     * @description remove the first element from state.
     * @returns instance of iterator.
     */
    removeFirst(): Iterator<T>;
    /**
     * @description Create a new instance of Iterator and keep current state.
     * @returns a new instance of Iterator with state.
     */
    clone(): IIterator<T>;
    /**
     * @description Get elements on state as array.
     * @returns array of items on state.
     */
    toArray(): Array<T>;
    /**
     * @description Count total of items on state.
     * @returns total of items on state.
     */
    total(): number;
}
export default Iterator;
//# sourceMappingURL=iterator.d.ts.map