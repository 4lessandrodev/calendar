import { UID } from "../types";
/**
 * @description Identity to Entity and Aggregates
 * @method create
 * @param value as string
 */
export declare class ID<T = string> implements UID<T> {
    private _value;
    private _isNew;
    private _createdAt;
    private readonly MAX_SIZE;
    private constructor();
    private setAsNew;
    /**
     * @description Update id value to a short value one. 16bytes.
     * @returns instance of ID with short value. 16bytes
     */
    toShort(): UID<string>;
    /**
     * @description Get the id value.
     * @returns id value as string or number.
     */
    value(): string;
    /**
     * @description Check if id instance is a new one.
     * @returns `true` if id instance is new or `false` if not.
     * @example
     * ID.create("some-value") // this is not a new because on create you provided string value as param.
     *
     * @example
     * ID.create() // this is a new one because none args was provided.
     */
    isNew(): boolean;
    /**
     * @description Get created date
     * @returns date
     */
    createdAt(): Date;
    /**
     * @description Check if id instance is short. 16bytes
     * @returns `true` if id instance has short value and 'false` cause not.
     */
    isShort(): boolean;
    /**
     * @description Compare value from instance and provided id.
     * @param id instance of ID
     * @returns `true` if provided id value and instance value has the same value and `false` if not.
     */
    equal(id: UID<any>): boolean;
    /**
     * @description Compare value from instance and provided id.
     * @param id instance of ID
     * @returns `true` if provided id value and instance value has the same value and `false` if not.
     */
    isEqual(id: UID<any>): boolean;
    /**
     * @description Deep comparative. Compare value and serialized instances.
     * @param id instance of ID
     * @returns `true` if provided id and instance is equal and `false` if not.
     */
    deepEqual(id: UID<any>): boolean;
    /**
     * @description Create a clone from instance. This function does not change instance state.
     * @returns a cloned instance with the same properties and value.
     */
    cloneAsNew(): UID<string>;
    /**
     * @description Create a clone from instance. This function does not change instance state.
     * @returns a cloned instance with the same value.
     */
    clone(): UID<T>;
    /**
     * @description Create a short id. 16bytes.
     * @param id value as string optional.If you do not provide a value a new id value will be generated.
     * @returns instance of ID.
     */
    static short(id?: string | number): UID<string>;
    /**
     * @description Create a short id.
     * @param id value as string optional.If you do not provide a value a new uuid value will be generated.
     * @returns instance of ID.
     */
    static create<T = string | number>(id?: T): UID<string>;
}
export default ID;
export declare const id: typeof ID;
export declare const Uid: typeof ID.create;
export declare const Id: typeof ID.create;
//# sourceMappingURL=id.d.ts.map