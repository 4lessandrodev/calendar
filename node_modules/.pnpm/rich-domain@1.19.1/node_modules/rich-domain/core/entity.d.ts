import { EntityMapperPayload, EntityProps, IAdapter, IEntity, IResult, ISettings, UID } from "../types";
import AutoMapper from "./auto-mapper";
import GettersAndSetters from "./getters-and-setters";
/**
 * @description Entity identified by an id
 */
export declare class Entity<Props extends EntityProps> extends GettersAndSetters<Props> implements IEntity<Props> {
    protected _id: UID<string>;
    protected autoMapper: AutoMapper<Props>;
    constructor(props: Props, config?: ISettings);
    /**
     * @description Check if entity instance props is equal another provided instance props.
     * @param createdAt is not considered on compare
     * @param updatedAt is not considered on compare
     * @returns true if props is equal and false if not.
    */
    isEqual(other: this): boolean;
    /**
     * @description Get value as object from entity.
     * @returns object with properties.
     */
    toObject<T>(adapter?: IAdapter<this, T>): T extends {} ? T & EntityMapperPayload : {
        [key in keyof Props]: any;
    } & EntityMapperPayload;
    /**
     * @description Get id as ID instance
     * @returns ID instance
     */
    get id(): UID<string>;
    /**
     * @description Get hash to identify the entity.
     * @returns Entity hash as ID instance.
     * @example
     * `[Entity@ClassName]:UUID`
     *
     * @summary className is defined on constructor config param
     */
    hashCode(): UID<string>;
    /**
     * @description Check if an entity is a new instance.
     * @returns `true` if entity is a new instance generated and `false` if not.
     * @summary new instance: not saved on database yet.
     */
    isNew(): boolean;
    /**
     * @description Get a new instanced based on current Entity.
     * @summary if not provide an id a new one will be generated.
     * @param props as optional Entity Props.
     * @returns new Entity instance.
     */
    clone(props?: Partial<Props>): this;
    /**
     * @description Method to validate props. This method is used to validate props on create a instance.
     * @param props to validate
     * @returns true if props is valid and false if not.
     */
    static isValidProps(props: any): boolean;
    static create(props: any): IResult<any, any, any>;
}
export default Entity;
//# sourceMappingURL=entity.d.ts.map