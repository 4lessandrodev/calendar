import { IAdapter, IResult, ISettings, IValueObject } from "../types";
import AutoMapper from "./auto-mapper";
import GettersAndSetters from "./getters-and-setters";
/**
 * @description ValueObject an attribute for entity and aggregate
 */
export declare class ValueObject<Props> extends GettersAndSetters<Props> implements IValueObject<Props> {
    protected autoMapper: AutoMapper<Props>;
    constructor(props: Props, config?: ISettings);
    /**
     * @description Check if value object instance props is equal another provided instance props.
     * @param createdAt is not considered on compare
     * @param updatedAt is not considered on compare
     * @returns true if props is equal and false if not.
    */
    isEqual(other: this): boolean;
    /**
     * @description Get an instance copy.
     * @returns a new instance of value object.
     */
    clone(props?: Partial<Props>): ValueObject<Props>;
    /**
     * @description Get value from value object.
     * @returns value as string, number or any type defined.
     */
    toObject<T>(adapter?: IAdapter<this, T>): T;
    /**
     * @description use immutable value object.
     * @deprecated do not use `set` function to change `value-object` state.
     * @access create a new instance instead
     * @method `set` function will be removed for `value-objects` in future version.
     * returns "true" if the value has changed and returns "false" if the value has not changed.
     */
    set<Key extends keyof Props>(key: Key): {
        to: (value: Props[Key], validation?: ((value: Props[Key]) => boolean) | undefined) => boolean;
    };
    /**
     * @description use immutable value object.
     * @deprecated do not use change function to modify `value-object` state.
     * @access create a new instance instead
     * @method `change` function will be removed for `value-objects` in future version.
     */
    change<Key extends keyof Props>(key: Key, value: Props[Key], validation?: ((value: Props[Key]) => boolean) | undefined): boolean;
    /**
     * @description Method to validate prop value.
     * @param props to validate
     */
    static isValidProps(props: any): boolean;
    static create(props: any): IResult<any, any, any>;
}
export default ValueObject;
//# sourceMappingURL=value-object.d.ts.map