"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const auto_mapper_1 = require("./auto-mapper");
const getters_and_setters_1 = require("./getters-and-setters");
const id_1 = require("./id");
const result_1 = require("./result");
/**
 * @description Entity identified by an id
 */
class Entity extends getters_and_setters_1.default {
    constructor(props, config) {
        super(Object.assign({}, { createdAt: new Date(), updatedAt: new Date() }, { ...props }), 'Entity', config);
        const isID = this.validator.isID(props?.['id']);
        const isStringOrNumber = this.validator.isString(props?.['id']) || this.validator.isNumber(props?.['id']);
        this._id = isStringOrNumber ? id_1.default.create(props?.['id']) : isID ? props?.['id'] : id_1.default.create();
        this.autoMapper = new auto_mapper_1.default();
    }
    /**
     * @description Check if entity instance props is equal another provided instance props.
     * @param createdAt is not considered on compare
     * @param updatedAt is not considered on compare
     * @returns true if props is equal and false if not.
    */
    isEqual(other) {
        const currentProps = Object.assign({}, {}, { ...this?.props });
        const providedProps = Object.assign({}, {}, { ...other?.props });
        delete currentProps?.['createdAt'];
        delete currentProps?.['updatedAt'];
        delete providedProps?.['createdAt'];
        delete providedProps?.['updatedAt'];
        const equalId = this.id.equal(other?.id);
        const serializedA = JSON.stringify(currentProps);
        const serializedB = JSON.stringify(providedProps);
        const equalSerialized = serializedA === serializedB;
        return equalId && equalSerialized;
    }
    /**
     * @description Get value as object from entity.
     * @returns object with properties.
     */
    toObject(adapter) {
        if (adapter && typeof adapter?.build === 'function')
            return adapter.build(this).value();
        return this.autoMapper.entityToObj(this);
    }
    /**
     * @description Get id as ID instance
     * @returns ID instance
     */
    get id() {
        return this._id;
    }
    /**
     * @description Get hash to identify the entity.
     * @returns Entity hash as ID instance.
     * @example
     * `[Entity@ClassName]:UUID`
     *
     * @summary className is defined on constructor config param
     */
    hashCode() {
        const name = Reflect.getPrototypeOf(this);
        return id_1.default.create(`[Entity@${name?.constructor?.name}]:${this.id.value()}`);
    }
    /**
     * @description Check if an entity is a new instance.
     * @returns `true` if entity is a new instance generated and `false` if not.
     * @summary new instance: not saved on database yet.
     */
    isNew() {
        return this.id.isNew();
    }
    /**
     * @description Get a new instanced based on current Entity.
     * @summary if not provide an id a new one will be generated.
     * @param props as optional Entity Props.
     * @returns new Entity instance.
     */
    clone(props) {
        const _props = props ? { ...this.props, ...props } : { ...this.props };
        const instance = Reflect.getPrototypeOf(this);
        const args = [_props, this.config];
        const entity = Reflect.construct(instance.constructor, args);
        return entity;
    }
    /**
     * @description Method to validate props. This method is used to validate props on create a instance.
     * @param props to validate
     * @returns true if props is valid and false if not.
     */
    static isValidProps(props) {
        return !this.validator.isUndefined(props) && !this.validator.isNull(props);
    }
    ;
    /**
     *
     * @param props params as Props
     * @param id optional uuid as string in props. If not provided on props a new one will be generated.
     * @returns instance of result with a new Entity on state if success.
     * @summary result state will be `null` case failure.
     */
    static create(props) {
        if (!this.isValidProps(props))
            return result_1.default.fail('Invalid props to create an instance of ' + this.name);
        return result_1.default.Ok(new this(props));
    }
    ;
}
exports.Entity = Entity;
exports.default = Entity;
//# sourceMappingURL=entity.js.map