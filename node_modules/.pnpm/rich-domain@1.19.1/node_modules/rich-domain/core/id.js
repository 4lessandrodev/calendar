"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Id = exports.Uid = exports.id = exports.ID = void 0;
const crypto_1 = require("./crypto");
/**
 * @description Identity to Entity and Aggregates
 * @method create
 * @param value as string
 */
class ID {
    constructor(id) {
        this.MAX_SIZE = 16;
        this._createdAt = new Date();
        if (typeof id === 'undefined') {
            const uuid = (0, crypto_1.UUID)();
            this._value = uuid;
            this._isNew = true;
            return this;
        }
        const isString = typeof id === 'string';
        this._value = isString ? id : String(id);
        this._isNew = false;
        return this;
    }
    ;
    setAsNew() {
        this._isNew = true;
    }
    /**
     * @description Update id value to a short value one. 16bytes.
     * @returns instance of ID with short value. 16bytes
     */
    toShort() {
        let short = '';
        let longValue = this._value;
        if (longValue.length < this.MAX_SIZE) {
            longValue = (0, crypto_1.UUID)() + longValue;
        }
        longValue = longValue.toUpperCase().replace(/-/g, '');
        const chars = longValue.split('');
        while (short.length < this.MAX_SIZE) {
            const lastChar = chars.pop();
            short = lastChar + short;
        }
        this._createdAt = new Date();
        this._value = short;
        return this;
    }
    /**
     * @description Get the id value.
     * @returns id value as string or number.
     */
    value() {
        return this._value;
    }
    /**
     * @description Check if id instance is a new one.
     * @returns `true` if id instance is new or `false` if not.
     * @example
     * ID.create("some-value") // this is not a new because on create you provided string value as param.
     *
     * @example
     * ID.create() // this is a new one because none args was provided.
     */
    isNew() {
        return this._isNew;
    }
    /**
     * @description Get created date
     * @returns date
     */
    createdAt() {
        return this._createdAt;
    }
    /**
     * @description Check if id instance is short. 16bytes
     * @returns `true` if id instance has short value and 'false` cause not.
     */
    isShort() {
        return this._value.length === this.MAX_SIZE;
    }
    /**
     * @description Compare value from instance and provided id.
     * @param id instance of ID
     * @returns `true` if provided id value and instance value has the same value and `false` if not.
     */
    equal(id) {
        return (typeof this._value === typeof id?.value()) && (this._value === id?.value());
    }
    /**
     * @description Compare value from instance and provided id.
     * @param id instance of ID
     * @returns `true` if provided id value and instance value has the same value and `false` if not.
     */
    isEqual(id) {
        return this.equal(id);
    }
    /**
     * @description Deep comparative. Compare value and serialized instances.
     * @param id instance of ID
     * @returns `true` if provided id and instance is equal and `false` if not.
     */
    deepEqual(id) {
        const A = JSON.stringify(this);
        const B = JSON.stringify(id);
        return A === B;
    }
    /**
     * @description Create a clone from instance. This function does not change instance state.
     * @returns a cloned instance with the same properties and value.
     */
    cloneAsNew() {
        const newUUID = new ID(this._value);
        newUUID.setAsNew();
        return newUUID;
    }
    /**
     * @description Create a clone from instance. This function does not change instance state.
     * @returns a cloned instance with the same value.
     */
    clone() {
        return new ID(this._value);
    }
    /**
     * @description Create a short id. 16bytes.
     * @param id value as string optional.If you do not provide a value a new id value will be generated.
     * @returns instance of ID.
     */
    static short(id) {
        const _id = new ID(id);
        if (typeof id === 'undefined')
            _id.setAsNew();
        _id.toShort();
        return _id;
    }
    ;
    /**
     * @description Create a short id.
     * @param id value as string optional.If you do not provide a value a new uuid value will be generated.
     * @returns instance of ID.
     */
    static create(id) {
        return new ID(id);
    }
}
exports.ID = ID;
exports.default = ID;
exports.id = ID;
exports.Uid = ID.create;
exports.Id = ID.create;
//# sourceMappingURL=id.js.map