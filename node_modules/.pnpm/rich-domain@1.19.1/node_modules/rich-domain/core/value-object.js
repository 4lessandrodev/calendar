"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueObject = void 0;
const auto_mapper_1 = require("./auto-mapper");
const getters_and_setters_1 = require("./getters-and-setters");
const result_1 = require("./result");
/**
 * @description ValueObject an attribute for entity and aggregate
 */
class ValueObject extends getters_and_setters_1.default {
    constructor(props, config) {
        super(props, 'ValueObject', config);
        this.autoMapper = new auto_mapper_1.default();
    }
    /**
     * @description Check if value object instance props is equal another provided instance props.
     * @param createdAt is not considered on compare
     * @param updatedAt is not considered on compare
     * @returns true if props is equal and false if not.
    */
    isEqual(other) {
        const currentProps = Object.assign({}, {}, { ...this?.props });
        const providedProps = Object.assign({}, {}, { ...other?.props });
        delete currentProps?.['createdAt'];
        delete currentProps?.['updatedAt'];
        delete providedProps?.['createdAt'];
        delete providedProps?.['updatedAt'];
        return JSON.stringify(currentProps) === JSON.stringify(providedProps);
    }
    /**
     * @description Get an instance copy.
     * @returns a new instance of value object.
     */
    clone(props) {
        const _props = props ? { ...this.props, ...props } : { ...this.props };
        const instance = Reflect.getPrototypeOf(this);
        const args = [_props, this.config];
        const obj = Reflect.construct(instance.constructor, args);
        return obj;
    }
    /**
     * @description Get value from value object.
     * @returns value as string, number or any type defined.
     */
    toObject(adapter) {
        if (adapter && typeof adapter?.build === 'function')
            return adapter.build(this).value();
        return this.autoMapper.valueObjectToObj(this);
    }
    /**
     * @description use immutable value object.
     * @deprecated do not use `set` function to change `value-object` state.
     * @access create a new instance instead
     * @method `set` function will be removed for `value-objects` in future version.
     * returns "true" if the value has changed and returns "false" if the value has not changed.
     */
    set(key) {
        return super.set(key);
    }
    /**
     * @description use immutable value object.
     * @deprecated do not use change function to modify `value-object` state.
     * @access create a new instance instead
     * @method `change` function will be removed for `value-objects` in future version.
     */
    change(key, value, validation) {
        return super.change(key, value, validation);
    }
    /**
     * @description Method to validate prop value.
     * @param props to validate
     */
    static isValidProps(props) {
        return !this.validator.isUndefined(props) && !this.validator.isNull(props);
    }
    ;
    /**
     *
     * @param props params as Props
     * @returns instance of result with a new Value Object on state if success.
     * @summary result state will be `null` case failure.
     */
    static create(props) {
        if (!this.isValidProps(props))
            return result_1.default.fail('Invalid props to create an instance of ' + this.name);
        return result_1.default.Ok(new this(props));
    }
    ;
}
exports.ValueObject = ValueObject;
exports.default = ValueObject;
//# sourceMappingURL=value-object.js.map