import { IParentName, ISettings } from "../types";
import { ICreateManyDomain, IGettersAndSetters } from "../types";
import { Validator } from "../utils/validator";
import { Utils } from "../utils/util";
/**
 * @description defines getter and setter to all domain instances.
 */
export declare class GettersAndSetters<Props> implements IGettersAndSetters<Props> {
    protected props: Props;
    protected validator: Validator;
    protected static validator: Validator;
    protected util: Utils;
    protected static util: Utils;
    private parentName;
    protected config: ISettings;
    constructor(props: Props, parentName: IParentName, config?: ISettings);
    /**
     * @description Create many domain instances
     * @param data Array of options
     * @returns data and result.
     * @summary result: final result of validating each instance
     * @summary data: all created instances as iterator of Result.
     * @callback Class you can use this function to create the args and define types to Props.
     *
     * @example
     *
     * const { result, data } = ValueObject.createMany([
     *   Class<AgeProps>(Age, props),
     *   Class<NameProps>(Name, props),
     *   Class<PriceProps>(Price, props)
     * ]);
     *
     * result.isOk() // true
     *
     * const age = data.next() as IResult<Age>;
     * const name = data.next() as IResult<Name>;
     * const price = data.next() as IResult<Price>;
     *
     * age.value().get('value') // 21
     *
     */
    static createMany(data: ICreateManyDomain): import("../types").ICreateManyResult;
    /**
     * @description Validation used to `set` and `change` methods to validate value before set it.
     * @param _key prop key type
     * @param _value prop value type
     * @returns true if value is valid and false if is invalid.
     *
     *
     * @example
     * interface Props {
     *		value: string;
     *		age: number;
     *	};
     *
     *	class StringVo extends ValueObject<Props>{
     *		private constructor(props: Props) { super(props) }
     *
     *		validation<Key extends keyof Props>(value: Props[Key], key: Key): boolean {
     *
     *			const options: IPropsValidation<Props> = {
     *				value: (value: string) => value.length < 15,
     *				age: (value: number) => value > 0
     *			}
     *
     *			return options[key](value);
     *		};
     *
     *		public static create(props: Props): IResult<ValueObject<Props>, string> {
     *			return Result.Ok(new StringVo(props));
     *		}
     *	}
     */
    validation(_value: any, _key?: any): boolean;
    /**
     * @description Validation used to `set` and `change` methods to validate value before set it.
     * @param _key prop key type
     * @param _value prop value type
     * @returns true if value is valid and false if is invalid.
     *
     *
     * @example
     * interface Props {
     *		value: string;
     *		age: number;
     *	};
     *
     *	class StringVo extends ValueObject<Props>{
     *		private constructor(props: Props) { super(props) }
     *
     *		validation<Key extends keyof Props>(value: Props[Key], key: Key): boolean {
     *
     *			const options: IPropsValidation<Props> = {
     *				value: (value: string) => value.length < 15,
     *				age: (value: number) => value > 0
     *			}
     *
     *			return options[key](value);
     *		};
     *
     *		public static create(props: Props): IResult<ValueObject<Props>, string> {
     *			return Result.Ok(new StringVo(props));
     *		}
     *	}
     */
    validation(_value: any, _key: any): boolean;
    /**
     *
     * @param key the property key you want to get
     * @returns the value of property
     */
    get<Key extends keyof Props>(key: Key): Props[Key];
    /**
     *
     * @param key the property you want to set.
     * @returns to function asking the value you want to set.
     */
    set<Key extends keyof Props>(key: Key): {
        /**
         * @description The value is only applied if pass on validation.
         * @param value the value you want to apply.
         * @param validation function to validate the value before apply. The value will be applied only if to pass on validation.
         * @example
         * (value: PropValue) => boolean;
         * @returns returns "true" if the value has changed and returns "false" if the value has not changed.
         */
        to: (value: Props[Key], validation?: ((value: Props[Key]) => boolean) | undefined) => boolean;
    };
    /**
     *
     * @param key the property you want to set.
     * @param value the value to apply to the key.
     * @param validation function to validate the value before apply. The value will be applied only if to pass.
     * @returns returns "true" if the value has changed and returns "false" if the value has not changed.
     */
    change<Key extends keyof Props>(key: Key, value: Props[Key], validation?: (value: Props[Key]) => boolean): boolean;
}
export default GettersAndSetters;
//# sourceMappingURL=getters-and-setters.d.ts.map