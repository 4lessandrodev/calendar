import { EventHandler, IAggregate, IDispatchOptions, IDomainEvent, IEvent, IIterator, UID } from "../types";
/**
 * @description Domain Events manager for global events.
 * @global events for aggregates.
 * @ignore events added in instance of aggregates directly.
 */
export declare abstract class DomainEvents {
    static events: IIterator<IDomainEvent<IAggregate<any>>>;
    /**
     * @description Add event to state.
     * @param param event to be added.
     */
    static addEvent<T = any>({ event, replace }: IEvent<IAggregate<T>>): void;
    /**
     * @description Dispatch event for a provided name and an aggregate id.
     * @param options params to find event to dispatch it.
     * @returns promise void.
     */
    static dispatch(options: IDispatchOptions, handler?: EventHandler<IAggregate<any>, void>): Promise<void>;
    /**
     * @description Dispatch event for a provided name and an aggregate id.
     * @param id aggregate id.
     * @returns promise void.
     */
    static dispatchAll(id: UID, handler?: EventHandler<IAggregate<any>, void>): Promise<void>;
    /**
     * @description Delete an event from state.
     * @param options to find event to be deleted.
     */
    static deleteEvent(options: IDispatchOptions): void;
}
export default DomainEvents;
//# sourceMappingURL=events.d.ts.map