"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoMapper = void 0;
const utils_1 = require("../utils");
/**
 * @description Auto Mapper transform a domain resource into object.
 */
class AutoMapper {
    constructor() {
        this.validator = utils_1.Validator.create();
    }
    /**
     * @description Transform a value object into a simple value.
     * @param valueObject as instance.
     * @returns an object or a value object value.
     */
    valueObjectToObj(valueObject) {
        // internal state
        if (valueObject === null)
            return null;
        if (this.validator.isID(valueObject))
            return valueObject?.value();
        let props = {};
        const isSimpleValue = this.validator.isBoolean(valueObject) ||
            this.validator.isNumber(valueObject) ||
            this.validator.isString(valueObject) ||
            this.validator.isObject(valueObject) ||
            this.validator.isDate(valueObject);
        if (isSimpleValue)
            return valueObject;
        const isID = this.validator.isID(valueObject);
        const id = valueObject;
        if (isID)
            return id?.value();
        // props
        const voProps = valueObject?.['props'];
        const isSimp = this.validator.isBoolean(voProps) ||
            this.validator.isNumber(voProps) ||
            this.validator.isString(voProps) ||
            this.validator.isDate(voProps);
        if (isSimp)
            return voProps;
        const keys = Object.keys(voProps);
        const values = keys.map((key) => {
            const isVo = this.validator.isValueObject(voProps?.[key]);
            if (isVo)
                return this.valueObjectToObj(voProps?.[key]);
            const isSimpleValue = this.validator.isBoolean(voProps?.[key]) ||
                this.validator.isNumber(voProps?.[key]) ||
                this.validator.isString(voProps?.[key]) ||
                this.validator.isObject(voProps?.[key]) ||
                this.validator.isDate(voProps?.[key]) ||
                voProps?.[key] === null;
            if (isSimpleValue)
                return voProps?.[key];
            const isID = this.validator.isID(voProps?.[key]);
            const id = voProps?.[key];
            if (isID)
                return id.value();
            const isArray = this.validator.isArray(voProps?.[key]);
            if (isArray) {
                let arr = voProps?.[key];
                const results = [];
                arr.forEach((data) => {
                    const result = this.valueObjectToObj(data);
                    results.push(result);
                });
                return results;
            }
        });
        const hasUniqueValue = values.length === 1;
        props = {};
        if (!hasUniqueValue) {
            values.forEach((value, i) => {
                props = Object.assign({}, { ...props }, { [keys[i]]: value });
            });
        }
        return hasUniqueValue ? values[0] : props;
    }
    /**
     * @description Transform a entity into a simple object.
     * @param entity instance.
     * @returns a simple object.
     */
    entityToObj(entity) {
        if (this.validator.isID(entity))
            return entity?.value();
        let result = {};
        const isEntity = this.validator.isEntity(entity);
        const isAggregate = this.validator.isAggregate(entity);
        const props = entity?.['props'] ?? {};
        const isValueObject = this.validator.isValueObject(entity);
        const isSimpleValue = this.validator.isBoolean(entity) ||
            this.validator.isNumber(entity) ||
            this.validator.isString(entity) ||
            this.validator.isDate(entity) ||
            entity === null;
        if (isSimpleValue)
            return entity;
        if (isValueObject)
            return this.valueObjectToObj(entity);
        if (isEntity || isAggregate) {
            const id = entity?.id?.value();
            const createdAt = entity['props']['createdAt'];
            const updatedAt = entity['props']['updatedAt'];
            result = Object.assign({}, { ...result }, { id, createdAt, updatedAt });
            const keys = Object.keys(props);
            keys.forEach((key) => {
                const isArray = this.validator.isArray(props?.[key]);
                if (this.validator.isID(props?.[key])) {
                    result = Object.assign({}, { ...result }, { [key]: props[key]?.value() });
                }
                if (isArray) {
                    const arr = props?.[key] ?? [];
                    const subProps = arr.map((item) => this.entityToObj(item));
                    result = Object.assign({}, { ...result }, { [key]: subProps });
                }
                const isSimple = this.validator.isValueObject(props?.[key]) ||
                    this.validator.isBoolean(props?.[key]) ||
                    this.validator.isNumber(props?.[key]) ||
                    this.validator.isString(props?.[key]) ||
                    this.validator.isObject(props?.[key]) ||
                    this.validator.isDate(props?.[key]) ||
                    props?.[key] === null;
                const isEntity = this.validator.isEntity(props?.[key]);
                if (isEntity) {
                    const data = this.entityToObj(props[key]);
                    result = Object.assign({}, { ...result }, { [key]: data });
                }
                else if (isSimple) {
                    const data = this.valueObjectToObj(props[key]);
                    result = Object.assign({}, { ...result }, { [key]: data });
                }
            });
        }
        return result;
    }
}
exports.AutoMapper = AutoMapper;
exports.default = AutoMapper;
//# sourceMappingURL=auto-mapper.js.map